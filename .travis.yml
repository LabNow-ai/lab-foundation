language: minimal

dist: bionic

branches:
  only:
    - master
    - devops

notifications:
  slack: q-pod:lrzKf5Ff1Ao1MGclzElR23j4    

env:
  global:
    - REGISTRY_URL: "docker.io"  # docker.io or other registry URL, DOCKER_REGISTRY_USER/DOCKER_REGISTRY_PASSWORD to be set in CI env.
    - DOCKER_BUILDKIT: 0

install:
  - echo '{"experimental":true}' | sudo tee /etc/docker/daemon.json && sudo service docker restart && docker info

before_script:
  - echo IP=$(curl -s http://ifconfig.me/ip)
  - CI_PROJECT_NAMESPACE=$([[ "$TRAVIS_PULL_REQUEST_SLUG" = "" ]] && echo "$(dirname ${TRAVIS_REPO_SLUG})" || echo "$(dirname ${TRAVIS_PULL_REQUEST_SLUG})")
  - export NAMESPACE=$(echo "${REGISTRY_URL}/${CI_PROJECT_NAMESPACE}" | awk '{print tolower($0)}')
  - export VER=`date +%Y.%m%d`
  - build_image() {
      IMG=$1; TAG=$2; FILE=$3; shift 3;
      [[ "$TRAVIS_PULL_REQUEST_BRANCH" == "" ]] && BASE_NAMESPACE="${NAMESPACE}" || BASE_NAMESPACE="${NAMESPACE}0${TRAVIS_PULL_REQUEST_BRANCH}" ;
      docker build --squash --compress --force-rm=true -t "${BASE_NAMESPACE}/${IMG}:${TAG}" -f "$FILE" --build-arg "BASE_NAMESPACE=${BASE_NAMESPACE}" "$@" "$(dirname $FILE)" ;
      docker tag "${BASE_NAMESPACE}/${IMG}:${TAG}" "${BASE_NAMESPACE}/${IMG}:${VER}" ;
    }
  - alias_image() {
      IMG_1=$1; TAG_1=$2; IMG_2=$3; TAG_2=$4; shift 4;
      [[ "$TRAVIS_PULL_REQUEST_BRANCH" == "" ]] && BASE_NAMESPACE="${NAMESPACE}" || BASE_NAMESPACE="${NAMESPACE}0${TRAVIS_PULL_REQUEST_BRANCH}" ;
      docker tag "${BASE_NAMESPACE}/${IMG_1}:${TAG_1}" "${BASE_NAMESPACE}/${IMG_2}:${TAG_2}" ;
      docker tag "${BASE_NAMESPACE}/${IMG_2}:${TAG_2}" "${BASE_NAMESPACE}/${IMG_2}:${VER}" ;
    }

after_script:
  - docker image prune --force && docker images
  - IMGS=$(docker images | grep "second" | awk '{print $1 ":" $2}')
  - echo "$DOCKER_REGISTRY_PASSWORD" | docker login "${REGISTRY_URL}" -u "$DOCKER_REGISTRY_USER" --password-stdin ;
    for IMG in $(echo $IMGS | tr " " "\n") ;
    do
      docker push "${IMG}";
      status=$?;
      echo "[${status}] Image pushed > ${IMG}";
    done

jobs:
  include:
    - stage: atom
    - name: atom
      script: build_image atom latest docker_atom/Dockerfile

    - stage: base
    - name: base
      script:
      - build_image base latest docker_base/Dockerfile
      - alias_image base latest py-mini latest
#-------------------------------------------------------------------------------
#    core: full - start the full job fist as it's time consuming
#-------------------------------------------------------------------------------
    - stage: core  
    - name: core
      script: build_image core    latest docker_core/Dockerfile        
            --build-arg "ARG_PROFILE_PYTHON=base,datascience,database,nlp,cv,bio,chem,tf2,torch"
            --build-arg "ARG_PROFILE_R=base,datascience,rstudio,rshiny"
            --build-arg "ARG_PROFILE_NODEJS=base"
            --build-arg "ARG_PROFILE_JAVA=base,maven"
            --build-arg "ARG_PROFILE_GO=base"
            --build-arg "ARG_PROFILE_JULIA=base"
            --build-arg "ARG_PROFILE_OCTAVE=base"
            --build-arg "ARG_PROFILE_LATEX=base,cjk"
#-------------------------------------------------------------------------------
# Python: (mini - same as `base` as aliased above), datascience, bio, chem, nlp, cv, full
#-------------------------------------------------------------------------------
    - name: py-data
      script: build_image py-data latest docker_core/Dockerfile --build-arg "ARG_PROFILE_PYTHON=datascience,database"
    - name: py-nlp
      script: build_image py-nlp  latest docker_core/Dockerfile --build-arg "ARG_PROFILE_PYTHON=datascience,nlp"
    - name: py-cv
      script: build_image py-cv   latest docker_core/Dockerfile --build-arg "ARG_PROFILE_PYTHON=datascience,cv"
    - name: py-bio
      script: build_image py-bio  latest docker_core/Dockerfile --build-arg "ARG_PROFILE_PYTHON=datascience,bio"
    - name: py-chem
      script: build_image py-bio  latest docker_core/Dockerfile --build-arg "ARG_PROFILE_PYTHON=datascience,chem"
    - name: py-std
      script: build_image py-std  latest docker_core/Dockerfile --build-arg "ARG_PROFILE_PYTHON=datascience,database,nlp,cv,bio,chem"
    - name: py-jdk
      script: build_image py-jdk  latest docker_core/Dockerfile --build-arg "ARG_PROFILE_PYTHON=datascience,database,nlp,cv,bio,chem" --build-arg "ARG_PROFILE_JAVA=base"
#-------------------------------------------------------------------------------
#    R: mini, std, latex, studio
#-------------------------------------------------------------------------------
    - name: r-mini
      script: build_image r-mini  latest docker_core/Dockerfile --build-arg "ARG_PROFILE_R=base"
    - name: r-std
      script: build_image r-std   latest docker_core/Dockerfile --build-arg "ARG_PROFILE_R=base,datascience" --build-arg "ARG_PROFILE_JAVA=base"
    - name: r-latex
      script: build_image r-latex latest docker_core/Dockerfile --build-arg "ARG_PROFILE_R=base,datascience" --build-arg "ARG_PROFILE_JAVA=base" --build-arg "ARG_PROFILE_LATEX=base,cjk"
    - name: r-studio
      script: build_image r-studio  latest docker_core/Dockerfile --build-arg "ARG_PROFILE_R=base,datascience,rstudio,rshiny" --build-arg "ARG_PROFILE_JAVA=base" --build-arg "ARG_PROFILE_LATEX=base,cjk"
#-------------------------------------------------------------------------------
#    NodeJS: base
#-------------------------------------------------------------------------------
    - name: node
      script: build_image node    latest docker_core/Dockerfile --build-arg "ARG_PROFILE_NODEJS=base"
#-------------------------------------------------------------------------------
#    Java: base
#-------------------------------------------------------------------------------
    - name: jdk
      script: build_image jdk     latest docker_core/Dockerfile --build-arg "ARG_PROFILE_JAVA=base"
#-------------------------------------------------------------------------------
#    Julia: base
#-------------------------------------------------------------------------------
    - name: julia
      script: build_image julia   latest docker_core/Dockerfile --build-arg "ARG_PROFILE_JULIA=base"
#-------------------------------------------------------------------------------
#    Go: base
#-------------------------------------------------------------------------------
    - name: go
      script: build_image go      latest docker_core/Dockerfile --build-arg "ARG_PROFILE_GO=base"
#-------------------------------------------------------------------------------
#    Octave: base
#-------------------------------------------------------------------------------
    - name: octave
      script: build_image octave  latest docker_core/Dockerfile --build-arg "ARG_PROFILE_OCTAVE=base"
#===============================================================================
# GPU: cuda_10.0, cuda_10.1, cuda_10.2 (cuda), cuda_11.0
#-------------------------------------------------------------------------------
    - stage: cuda-base
    - name: cuda_10.0
      script: build_image cuda_10.0 latest docker_cuda/cuda10.0.Dockerfile
    - name: cuda_10.1
      script: build_image cuda_10.1 latest docker_cuda/cuda10.1.Dockerfile
    - name: cuda_10.2
      script: build_image cuda_10.2 latest docker_cuda/cuda10.2.Dockerfile
    - name: cuda_11.0
      script: build_image cuda_11.0 latest docker_cuda/cuda11.0.Dockerfile
#-------------------------------------------------------------------------------
#    Python with DeepLearning package: tf1 tf2 pytorch,
#-------------------------------------------------------------------------------
    - stage: cuda-core
    - name: py-cuda-10.0
      script:
        - build_image py-cuda-10.0 latest docker_core/Dockerfile --build-arg "ARG_PROFILE_PYTHON=tf1,datascience,nlp,cv" --build-arg "BASE_IMG=cuda_10.0"
        - alias_image py-cuda-10.0 latest tf1 latest
    - name: py-cuda-10.1
      script:
        - build_image py-cuda-10.1 latest docker_core/Dockerfile --build-arg "ARG_PROFILE_PYTHON=tf2,datascience,nlp,cv" --build-arg "BASE_IMG=cuda_10.1"
        - alias_image py-cuda-10.1 latest tf2 latest
    - name: py-cuda-10.2
      script:
        - build_image py-cuda-10.2 latest docker_core/Dockerfile --build-arg "ARG_PROFILE_PYTHON=torch,datascience,nlp,cv" --build-arg "BASE_IMG=cuda_10.2"
        - alias_image py-cuda-10.2 latest torch latest
#-------------------------------------------------------------------------------
#    Python with DeepLearning packages and others: core-cuda, full-cuda-10.1
#-------------------------------------------------------------------------------
    - stage: cuda-core
    - name: full-cuda    
      script:
        - build_image full-cuda-10.1 latest docker_core/Dockerfile
          --build-arg "BASE_IMG=cuda_10.1"
          --build-arg "ARG_PROFILE_PYTHON=base,datascience,database,nlp,cv,bio,chem,tf2,torch"
          --build-arg "ARG_PROFILE_R=base,datascience,rstudio,rshiny"
          --build-arg "ARG_PROFILE_NODEJS=base"
          --build-arg "ARG_PROFILE_JAVA=base,maven"
          --build-arg "ARG_PROFILE_GO=base"
          --build-arg "ARG_PROFILE_JULIA=base"
          --build-arg "ARG_PROFILE_LATEX=base,cjk"
        - alias_image full-cuda-10.1 latest core-cuda latest
#===============================================================================
#    dev: core-dev, full ; cuda-dev, full-cuda
#-------------------------------------------------------------------------------
    - stage: dev
    - name: core-dev
      script:
        - build_image core-dev latest docker_dev/Dockerfile --build-arg "ARG_PROFILE_JUPYTER=base,kernels,extensions" --build-arg "ARG_PROFILE_VSCODE=base"
        - alias_image core-dev latest full latest
    - name: cuda-dev
    - script:
        - build_image cuda-dev latest docker_dev/Dockerfile
          --build-arg "BASE_IMG=core-cuda"
          --build-arg "ARG_PROFILE_JUPYTER=base,kernels,extensions"
          --build-arg "ARG_PROFILE_VSCODE=base"
        - alias_image cuda-dev latest full-cuda latest
