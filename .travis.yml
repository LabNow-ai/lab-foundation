language: minimal

dist: bionic

env:
  global:
    - REGISTRY_URL: "docker.io"  # docker.io or other registry URL, DOCKER_REGISTRY_USER/DOCKER_REGISTRY_PASSWORD to be set in CI env.
    - DOCKER_BUILDKIT: 0

install:
  - echo '{"experimental":true}' | sudo tee /etc/docker/daemon.json && sudo service docker restart && docker info

before_script:
  - echo IP=$(curl -s http://ifconfig.me/ip)
  - CI_PROJECT_NAMESPACE=$([[ "$TRAVIS_PULL_REQUEST_SLUG" = "" ]] && echo "$(dirname ${TRAVIS_REPO_SLUG})" || echo "$(dirname ${TRAVIS_PULL_REQUEST_SLUG})")
  - export NAMESPACE=$(echo "${REGISTRY_URL}/${CI_PROJECT_NAMESPACE}" | awk '{print tolower($0)}')
  - export VER=`date +%Y.%m%d`
  - build_image() {
      IMG=$1; TAG=$2; FILE=$3; shift 3;
      [[ "$TRAVIS_BRANCH" == "master" ]] && BASE_NAMESPACE="${NAMESPACE}" || BASE_NAMESPACE="${NAMESPACE}0${TRAVIS_BRANCH}" ;
      docker build --squash --compress --force-rm=true -t "${BASE_NAMESPACE}/${IMG}:${TAG}" -f "$FILE" --build-arg "BASE_NAMESPACE=${BASE_NAMESPACE}" "$@" "$(dirname $FILE)" ;
      docker tag "${BASE_NAMESPACE}/${IMG}:${TAG}" "${BASE_NAMESPACE}/${IMG}:${VER}" ;
    }
  - alias_image() {
      IMG_1=$1; TAG_1=$2; IMG_2=$3; TAG_2=$4; shift 4;
      [[ "$TRAVIS_BRANCH" == "master" ]] && BASE_NAMESPACE="${NAMESPACE}" || BASE_NAMESPACE="${NAMESPACE}0${TRAVIS_BRANCH}" ;
      docker tag "${BASE_NAMESPACE}/${IMG_1}:${TAG_1}" "${BASE_NAMESPACE}/${IMG_2}:${TAG_2}" ;
      docker tag "${BASE_NAMESPACE}/${IMG_2}:${TAG_2}" "${BASE_NAMESPACE}/${IMG_2}:${VER}" ;
    }
  - 

after_script:
  - docker image prune --force && docker images
  - IMGS=$(docker images | grep "second" | awk '{print $1 ":" $2}')
  - if [ "$TRAVIS_PULL_REQUEST" = "false" ] ; then
      echo "$DOCKER_REGISTRY_PASSWORD" | docker login "${REGISTRY_URL}" -u "$DOCKER_REGISTRY_USER" --password-stdin ;
      for IMG in $(echo $IMGS | tr " " "\n") ;
      do
        docker push "${IMG}";
        status=$?;
        echo "[${status}] Image pushed > ${IMG}";
      done
    else
      echo "Not pushing ${IMGS} in PR ...";
    fi

stages: [atom, base, core, dev, cuda-base, cuda-core, cuda-dev]

jobs:
  allow_failures:
    - name: "cuda_10.2"
    - name: "cuda_11.0"

  include:
    - name: atom
      stage: atom
      script: build_image atom latest docker_atom/Dockerfile

    - name: base
      stage: base
      script:
        - build_image base latest docker_base/Dockerfile
        - alias_image base latest py-mini latest

#-------------------------------------------------------------------------------
# Python: (mini - same as `base` as aliased above), datascience, bioinfo, nlp, cv, full
#-------------------------------------------------------------------------------
    - name: py-data
      stage: core
      script: build_image py-data latest docker_core/Dockerfile --build-arg "ARG_PROFILE_PYTHON=datascience,database"

    - name: py-bioinfo
      stage: core
      script: build_image py-bio  latest docker_core/Dockerfile --build-arg "ARG_PROFILE_PYTHON=datascience,bioinfo"

    - name: py-nlp
      stage: core
      script: build_image py-nlp  latest docker_core/Dockerfile --build-arg "ARG_PROFILE_PYTHON=datascience,nlp"

    - name: py-cv
      stage: core
      script: build_image py-cv   latest docker_core/Dockerfile --build-arg "ARG_PROFILE_PYTHON=datascience,cv"

    - name: py-std
      stage: core
      script: build_image py-std  latest docker_core/Dockerfile --build-arg "ARG_PROFILE_PYTHON=datascience,database,nlp,cv,bioinfo"

    - name: py-jdk
      stage: core
      script: build_image py-jdk  latest docker_core/Dockerfile --build-arg "ARG_PROFILE_PYTHON=datascience,database,nlp,cv,bioinfo" --build-arg "ARG_PROFILE_JAVA=base"
#-------------------------------------------------------------------------------
#    R: mini, std, latex, studio
#-------------------------------------------------------------------------------
    - name: r-mini
      stage: core
      script: build_image r-mini  latest docker_core/Dockerfile --build-arg "ARG_PROFILE_R=base"

    - name: r-std
      stage: core
      script: build_image r-std   latest docker_core/Dockerfile --build-arg "ARG_PROFILE_R=base,datascience" --build-arg "ARG_PROFILE_JAVA=base"

    - name: r-latex
      stage: core
      script: build_image r-latex latest docker_core/Dockerfile --build-arg "ARG_PROFILE_R=base,datascience" --build-arg "ARG_PROFILE_JAVA=base" --build-arg "ARG_PROFILE_LATEX=base,cjk"

    - name: r-full
      stage: core
      script: build_image r-full  latest docker_core/Dockerfile --build-arg "ARG_PROFILE_R=base,datascience,rstudio,rshiny" --build-arg "ARG_PROFILE_JAVA=base" --build-arg "ARG_PROFILE_LATEX=base,cjk"
#-------------------------------------------------------------------------------
#    NodeJS: base
#-------------------------------------------------------------------------------
    - name: node
      stage: core
      script: build_image node    latest docker_core/Dockerfile --build-arg "ARG_PROFILE_NODEJS=base"
#-------------------------------------------------------------------------------
#    Java: base
#-------------------------------------------------------------------------------
    - name: jdk
      stage: core
      script: build_image jdk     latest docker_core/Dockerfile --build-arg "ARG_PROFILE_JAVA=base"
#-------------------------------------------------------------------------------
#    Julia: base
#-------------------------------------------------------------------------------
    - name: julia
      stage: core
      script: build_image julia   latest docker_core/Dockerfile --build-arg "ARG_PROFILE_JULIA=base"
#-------------------------------------------------------------------------------
#    Go: base
#-------------------------------------------------------------------------------
    - name: go
      stage: core
      script: build_image go      latest docker_core/Dockerfile --build-arg "ARG_PROFILE_GO=base"
#-------------------------------------------------------------------------------
#    core: mini
#-------------------------------------------------------------------------------
    # - name: octave
    #   stage: fabric
    #   script: build_image octave  latest docker_core/Dockerfile --build-arg "ARG_PROFILE_OCTAVE=base"
#-------------------------------------------------------------------------------
#    core: full
#-------------------------------------------------------------------------------
    - name: core
      stage: core
      script: build_image core    latest docker_core/Dockerfile        
              --build-arg "ARG_PROFILE_PYTHON=base,datascience,database,nlp,cv,bioinfo,chem,tf2,torch"
              --build-arg "ARG_PROFILE_R=base,datascience,rstudio,rshiny"
              --build-arg "ARG_PROFILE_JAVA=base,maven"
              --build-arg "ARG_PROFILE_GO=base"
              --build-arg "ARG_PROFILE_JULIA=base"
              --build-arg "ARG_PROFILE_LATEX=base,cjk"
#-------------------------------------------------------------------------------
#    dev
#-------------------------------------------------------------------------------
    - name: dev
      stage: dev
      script: build_image dev  latest docker_dev/Dockerfile --build-arg "ARG_PROFILE_JUPYTER=base,kernels,extensions" --build-arg "ARG_PROFILE_VSCODE=base"

#===============================================================================
# GPU: cuda_10.0, cuda_10.1, cuda_10.2 (cuda), cuda_11.0
#-------------------------------------------------------------------------------
    - name: cuda_10.0
      stage: cuda-base
      script: build_image cuda_10.0 latest docker_cuda/cuda10.0.Dockerfile

    - name: cuda_10.1
      stage: cuda-base
      script: build_image cuda_10.1 latest docker_cuda/cuda10.1.Dockerfile

    - name: cuda_10.2
      stage: cuda-base
      script: build_image cuda_10.2 latest docker_cuda/cuda10.2.Dockerfile

    - name: cuda_11.0
      stage: cuda-base
      script: build_image cuda_11.0 latest docker_cuda/cuda11.0.Dockerfile


    - name: py-cuda-10.0
      stage: cuda-core
      script:
        - build_image py-cuda-10.0 latest docker_core/Dockerfile --build-arg "ARG_PROFILE_PYTHON=tf1,datascience,nlp,cv" --build-arg "BASE_IMG=cuda_10.0"
        - alias_image py-cuda-10.0 latest tf1 latest

    - name: py-cuda-10.1
      stage: cuda-core
      script:
        - build_image py-cuda-10.1 latest docker_core/Dockerfile --build-arg "ARG_PROFILE_PYTHON=tf2,datascience,nlp,cv" --build-arg "BASE_IMG=cuda_10.1"
        - alias_image py-cuda-10.1 latest tf2 latest

    - name: py-cuda-10.2
      stage: cuda-core
      script:
        - build_image py-cuda-10.2 latest docker_core/Dockerfile --build-arg "ARG_PROFILE_PYTHON=torch,datascience,nlp,cv" --build-arg "BASE_IMG=cuda_10.2"
        - alias_image py-cuda-10.2 latest torch latest
#-------------------------------------------------------------------------------
#    core: full
#-------------------------------------------------------------------------------
    - name: full-cuda
      stage: cuda-core
      script:
        - build_image full-cuda-10.1 latest docker_core/Dockerfile
          --build-arg "BASE_IMG=cuda_10.1"
          --build-arg "ARG_PROFILE_PYTHON=base,datascience,database,nlp,cv,bioinfo,chem,tf2,torch"
          --build-arg "ARG_PROFILE_R=base,datascience,rstudio,rshiny"
          --build-arg "ARG_PROFILE_JAVA=base,maven"
          --build-arg "ARG_PROFILE_GO=base"
          --build-arg "ARG_PROFILE_JULIA=base"
          --build-arg "ARG_PROFILE_LATEX=base,cjk"
        - alias_image full-cuda-10.1 latest full-cuda latest
#-------------------------------------------------------------------------------
#    dev
#-------------------------------------------------------------------------------
    - name: cuda-full-dev
      stage: cuda-dev
      script:
        - build_image dev latest docker_dev/Dockerfile
          --build-arg "BASE_IMG=cuda_10.1"
          --build-arg "ARG_PROFILE_JUPYTER=base,kernels,extensions"
          --build-arg "ARG_PROFILE_VSCODE=base"

notifications:
  slack: q-pod:lrzKf5Ff1Ao1MGclzElR23j4
