language: minimal

dist: bionic

env:
  global:
    - REGISTRY_URL: "docker.io"  # docker.io or other registry URL, DOCKER_REGISTRY_USER/DOCKER_REGISTRY_PASSWORD to be set in CI env.

install:
  - echo '{"experimental":true}' | sudo tee /etc/docker/daemon.json && sudo service docker restart

before_script:
  - echo IP=$(curl -s http://ifconfig.me/ip)
  - docker info
  - CI_PROJECT_NAMESPACE=$([[ "$TRAVIS_PULL_REQUEST_SLUG" = "" ]] && echo "$(dirname ${TRAVIS_REPO_SLUG})" || echo "$(dirname ${TRAVIS_PULL_REQUEST_SLUG})")
  - export NAMESPACE=$(echo "${REGISTRY_URL}/${CI_PROJECT_NAMESPACE}" | awk '{print tolower($0)}')
  - build_image() {
      IMG=$1; TAG=$2; FILE=$3; shift 3;
      if [ "$TRAVIS_BRANCH" != "master" ] ; then
        IMG="${IMG}-${TRAVIS_BRANCH}" ;
      fi ;
      docker build --squash --force-rm=true -t "${REPOSITORY}:${TAG}" -f "$FILE" --build-arg "repository=${NAMESPACE}/${IMG}" "$@" "$(dirname $FILE)" ;
    }
  - alias_image() {
      IMG=$1; TAG_OLD=$2; TAG_NEW=$3; shift 3;
      if [ "$TRAVIS_BRANCH" != "master" ] ; then
        IMG="${IMG}-${TRAVIS_BRANCH}" ;
      fi ;
      docker tag "${NAMESPACE}/${IMG}:${TAG_OLD}" "${NAMESPACE}/${IMG}:${TAG_NEW}" ;
    }

after_script:
  - docker image prune --force && docker images
  - IMGS=$(docker images | grep "second" | awk '{print $1 ":" $2}')
  - if [ "$TRAVIS_PULL_REQUEST" = "false" ] ; then
      echo "$DOCKER_REGISTRY_PASSWORD" | docker login "${REGISTRY_URL}" -u "$DOCKER_REGISTRY_USER" --password-stdin ;
      for IMG in $(echo $IMGS | tr " " "\n") ;
      do
        docker push "${IMG}";
        status=$?;
        echo "[${status}] Image pushed > ${IMG}";
      done
    else
      echo "Not pushing ${IMGS} in PR ...";
    fi

stages:
  - base
  - core
  - cuda
  - jpy
  - qpod

jobs:
  allow_failures:
    - name: "base-cuda_10.2"
    - name: "base-cuda_11.0"

  include:
    - name: base
      stage: base
      script:
        - build_image qpod base docker_base/Dockerfile

    - name: core
      stage: core
      script:
        - build_image qpod core docker_core/Dockerfile
          

    - name: base-cuda_10.0
      stage: cuda
      script:
        - build_image qpod base-cuda_10.0 docker_base/cuda10.0.Dockerfile
          --build-arg "repository=${REPOSITORY}"

    - name: base-cuda_10.1
      stage: cuda
      script:
        - build_image qpod base-cuda_10.1 docker_base/cuda10.1.Dockerfile
          --build-arg "repository=${REPOSITORY}"
   
    - name: base-cuda_10.2
      stage: cuda
      script:
        - build_image qpod base-cuda_10.2 docker_base/cuda10.2.Dockerfile
          --build-arg "repository=${REPOSITORY}"
        - alias_image base-cuda_10.2 cuda

    - name: base-cuda_11.0
      stage: cuda
      script:
        - build_image qpod base-cuda_11.0 docker_base/cuda11.0.Dockerfile
          --build-arg "repository=${REPOSITORY}"


    - name: jupyter-mini
      stage: jpy
      script:
        - build_image qpod jupyter-mini docker_jpy/Dockerfile
          --build-arg "repository=${REPOSITORY}"
          --build-arg "ARG_EXTEND_JUPYTER=false"
          --build-arg "ARG_NODEJS=false"
          --build-arg "ARG_LATEX_BASE=false"
          --build-arg "ARG_LATEX_CJK=false"

    - name: jupyter-mini-cuda
      stage: jpy
      script:
        - build_image qpod jupyter-mini-cuda docker_jpy/Dockerfile
          --build-arg "repository=${REPOSITORY}"
          --build-arg "base=cuda"
          --build-arg "ARG_EXTEND_JUPYTER=false"
          --build-arg "ARG_NODEJS=false"
          --build-arg "ARG_LATEX_BASE=false"
          --build-arg "ARG_LATEX_CJK=false"

    - name: jupyter-std
      stage: jpy
      script:
        - build_image qpod jupyter-std docker_jpy/Dockerfile
          --build-arg "repository=${REPOSITORY}"
          --build-arg "ARG_EXTEND_JUPYTER=true"
          --build-arg "ARG_NODEJS=true"
          --build-arg "ARG_LATEX_BASE=false"
          --build-arg "ARG_LATEX_CJK=false"

    - name: jupyter-full
      stage: jpy
      script:
        - build_image qpod jupyter-full docker_jpy/Dockerfile
          --build-arg "repository=${REPOSITORY}"
          --build-arg "ARG_EXTEND_JUPYTER=true"
          --build-arg "ARG_NODEJS=true"
          --build-arg "ARG_LATEX_BASE=true"
          --build-arg "ARG_LATEX_CJK=true"

    - name: jupyter-full-cuda
      stage: jpy
      script:
        - build_image qpod jupyter-full-cuda docker_jpy/Dockerfile
          --build-arg "repository=${REPOSITORY}"
          --build-arg "base=cuda"
          --build-arg "ARG_EXTEND_JUPYTER=true"
          --build-arg "ARG_NODEJS=true"
          --build-arg "ARG_LATEX_BASE=true"
          --build-arg "ARG_LATEX_CJK=true"

    - name: jupyter-full-cuda_10.0
      stage: jpy
      script:
        - build_image qpod jupyter-full-cuda_10.0 docker_jpy/Dockerfile
          --build-arg "repository=${REPOSITORY}"
          --build-arg "base=base-cuda_10.0"
          --build-arg "ARG_EXTEND_JUPYTER=true"
          --build-arg "ARG_NODEJS=true"
          --build-arg "ARG_LATEX_BASE=true"
          --build-arg "ARG_LATEX_CJK=true"


    - name: r-mini
      stage: qpod
      script:
        - build_image qpod r-mini docker_template/Dockerfile
          --build-arg "repository=${REPOSITORY}"
          --build-arg "base=jupyter-mini"
          --build-arg "ARG_R=true"

    - name: r-std
      stage: qpod
      script:
        - build_image qpod r-std docker_template/Dockerfile
          --build-arg "repository=${REPOSITORY}"
          --build-arg "base=jupyter-std"
          --build-arg "ARG_JDK=true"
          --build-arg "ARG_R=true"
          --build-arg "ARG_R_DATASCIENCE=true"

    - name: r-latex
      stage: qpod
      script:
        - build_image qpod r-latex docker_template/Dockerfile
          --build-arg "repository=${REPOSITORY}"
          --build-arg "base=jupyter-full"
          --build-arg "ARG_JDK=true"
          --build-arg "ARG_R=true"
          --build-arg "ARG_R_DATASCIENCE=true"
          --build-arg "ARG_LATEX_BASE=true"

    - name: r-studio
      stage: qpod
      script:
        - build_image qpod r-studio docker_template/Dockerfile
          --build-arg "repository=${REPOSITORY}"
          --build-arg "base=jupyter-full"
          --build-arg "ARG_JDK=true"
          --build-arg "ARG_R=true"
          --build-arg "ARG_R_DATASCIENCE=true"
          --build-arg "ARG_R_STUDIO=true"
          --build-arg "ARG_LATEX_BASE=true"
          --build-arg "ARG_LATEX_CJK=true"

    - name: py-std
      stage: qpod
      script:
        - build_image qpod py-std docker_template/Dockerfile
          --build-arg "repository=${REPOSITORY}"
          --build-arg "base=jupyter-std"
          --build-arg "ARG_MKL=true"
          --build-arg "ARG_PY_DATABASE=true"
          --build-arg "ARG_PY_DATASCIENCE=true"
          --build-arg "ARG_PY_NLP=true"
          --build-arg "ARG_PY_CV=true"
          --build-arg "ARG_PY_BIOINFO=true"

    - name: py-jdk
      stage: qpod
      script:
        - build_image qpod py-jdk docker_template/Dockerfile
          --build-arg "repository=${REPOSITORY}"
          --build-arg "base=jupyter-std"
          --build-arg "ARG_JDK=true"
          --build-arg "ARG_MKL=true"
          --build-arg "ARG_PY_DATABASE=true"
          --build-arg "ARG_PY_DATASCIENCE=true"
          --build-arg "ARG_PY_NLP=true"
          --build-arg "ARG_PY_CV=true"
          --build-arg "ARG_PY_BIOINFO=true"

    - name: py-cuda
      stage: qpod
      script:
        - build_image qpod py-cuda docker_template/Dockerfile
          --build-arg "repository=${REPOSITORY}"
          --build-arg "base=jupyter-full-cuda"
          --build-arg "ARG_MKL=true"
          --build-arg "ARG_PY_DATABASE=true"
          --build-arg "ARG_PY_DATASCIENCE=true"
          --build-arg "ARG_PY_NLP=true"
          --build-arg "ARG_PY_CV=true"
          --build-arg "ARG_PY_BIOINFO=true"

    - name: py-cuda_10.0
      stage: qpod
      script:
        - build_image qpod py-cuda_10.0 docker_template/Dockerfile
          --build-arg "repository=${REPOSITORY}"
          --build-arg "base=jupyter-full-cuda_10.0"
          --build-arg "ARG_MKL=true"
          --build-arg "ARG_PY_DATABASE=true"
          --build-arg "ARG_PY_DATASCIENCE=true"
          --build-arg "ARG_PY_NLP=true"
          --build-arg "ARG_PY_CV=true"
          --build-arg "ARG_PY_BIOINFO=true"

    - name: go
      stage: qpod
      script:
        - build_image qpod go docker_template/Dockerfile
          --build-arg "repository=${REPOSITORY}"
          --build-arg "base=jupyter-std"
          --build-arg "ARG_GO=true"

    - name: julia
      stage: qpod
      script:
        - build_image qpod julia docker_template/Dockerfile
          --build-arg "repository=${REPOSITORY}"
          --build-arg "base=jupyter-std"
          --build-arg "ARG_JULIA=true"

    - name: octave
      stage: qpod
      script:
        - build_image qpod octave docker_template/Dockerfile
          --build-arg "repository=${REPOSITORY}"
          --build-arg "base=jupyter-full"
          --build-arg "ARG_OCTAVE=true"

    - name: full
      stage: qpod
      script:
        - build_image qpod full docker_template/Dockerfile
          --build-arg "repository=${REPOSITORY}"
          --build-arg "base=jupyter-full"
          --build-arg "ARG_JDK=true"
          --build-arg "ARG_MKL=true"
          --build-arg "ARG_PY_DATABASE=true"
          --build-arg "ARG_PY_DATASCIENCE=true"
          --build-arg "ARG_PY_NLP=true"
          --build-arg "ARG_PY_CV=true"
          --build-arg "ARG_PY_BIOINFO=true"
          --build-arg "ARG_R=true"
          --build-arg "ARG_R_DATASCIENCE=true"
          --build-arg "ARG_R_STUDIO=true"
          --build-arg "ARG_GO=true"
          --build-arg "ARG_JULIA=true"
          --build-arg "ARG_OCTAVE=false"
        - alias_image full latest

    - name: full-cuda
      stage: qpod
      script:
        - build_image qpod full-cuda docker_template/Dockerfile
          --build-arg "repository=${REPOSITORY}"
          --build-arg "base=jupyter-full-cuda"
          --build-arg "ARG_JDK=true"
          --build-arg "ARG_MKL=true"
          --build-arg "ARG_PY_DATABASE=true"
          --build-arg "ARG_PY_DATASCIENCE=true"
          --build-arg "ARG_PY_NLP=true"
          --build-arg "ARG_PY_CV=true"
          --build-arg "ARG_PY_BIOINFO=true"
          --build-arg "ARG_R=true"
          --build-arg "ARG_R_DATASCIENCE=true"
          --build-arg "ARG_R_STUDIO=true"
          --build-arg "ARG_GO=true"
          --build-arg "ARG_JULIA=true"
          --build-arg "ARG_OCTAVE=false"
        - alias_image full-cuda latest-cuda


notifications:
  slack: q-pod:lrzKf5Ff1Ao1MGclzElR23j4
