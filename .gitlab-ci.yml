image: docker:rc

services:
- name: docker:rc-dind
  command: ["--experimental"]

variables:
  REGISTRY_URL: "registry.gitlab.com"  # other registry URL, DOCKER_REGISTRY_USER/DOCKER_REGISTRY_PASSWORD to be set in CI env.
  CI_PROJECT_NAME: "docker-images/qpod"
  REPOSITORY: "${REGISTRY_URL}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}"
  DOCKER_DRIVER: overlay


stages:
  - base
  - cuda
  - jpy
  - qpod
  - vision

.build_tpl: &builder
  before_script:
    - export REPOSITORY=$(echo "${REPOSITORY}" | awk '{print tolower($0)}')
    - echo "Building Image> ${REPOSITORY}@${CI_COMMIT_REF_NAME}:${CI_JOB_NAME}"
    - build_image_squash() { TAG=$1; FILE=$2; shift 2; docker build --squash --force-rm=true -t "${REPOSITORY}:$TAG" -f "$FILE" "$@" "$(dirname $FILE)"; }
    - build_image() { TAG=$1; FILE=$2; shift 2; docker build --force-rm=true -t "${REPOSITORY}:$TAG" -f "$FILE" "$@" "$(dirname $FILE)"; }
    - alias_image() { docker tag "${REPOSITORY}:$1" "${REPOSITORY}:$2"; }

  after_script:
    - docker image prune --force && docker images
    - export REPOSITORY=$(echo "${REPOSITORY}" | awk '{print tolower($0)}')
    - if [ "$CI_COMMIT_REF_NAME" == "master" ]; then
        echo "$DOCKER_REGISTRY_PASSWORD" | docker login "${REGISTRY_URL}" -u "$DOCKER_REGISTRY_USER" --password-stdin;
        status=1;
        while [ $status -gt 0 ]; do
          docker push "${REPOSITORY}";
          status=$?;
          echo "[${status}] Image pushed > ${REPOSITORY}";
        done;
      else
        echo "Not pushing ${REPOSITORY} in non-master branch ...";
      fi

env:
  stage: base
  script:
    - apk add --no-cache curl && echo IP=$(curl -s http://ifconfig.me/ip)
    - docker info

base:
  <<: *builder
  stage: base
  script:
  - build_image_squash "${CI_JOB_NAME}" "docker_base/Dockerfile"

base-cuda_10.1:
  <<: *builder
  stage: cuda
  script:
  - build_image_squash "${CI_JOB_NAME}" "docker_base/Dockerfile-cuda10.1"
    --build-arg "repository=${REPOSITORY}"
  - docker rmi "${REPOSITORY}:base"

base-cuda_10.0:
  <<: *builder
  stage: cuda
  script:
  - build_image_squash "${CI_JOB_NAME}" "docker_base/Dockerfile-cuda10.0"
    --build-arg "repository=${REPOSITORY}"
  - alias_image "${CI_JOB_NAME}" "cuda"
  - docker rmi "${REPOSITORY}:base"


jupyter-mini:
  <<: *builder
  stage: jpy
  script:
  - build_image_squash "${CI_JOB_NAME}" "docker_jpy/Dockerfile"
    --build-arg "repository=${REPOSITORY}"
    --build-arg "ARG_EXTEND_JUPYTER=false"
    --build-arg "ARG_NODEJS=false"
    --build-arg "ARG_LATEX_BASE=false"
    --build-arg "ARG_LATEX_CJK=false"
  - docker rmi "${REPOSITORY}:base"

jupyter-mini-cuda:
  <<: *builder
  stage: jpy
  script:
  - build_image_squash "${CI_JOB_NAME}" "docker_jpy/Dockerfile"
    --build-arg "repository=${REPOSITORY}"
    --build-arg "base=cuda"
    --build-arg "ARG_EXTEND_JUPYTER=false"
    --build-arg "ARG_NODEJS=false"
    --build-arg "ARG_LATEX_BASE=false"
    --build-arg "ARG_LATEX_CJK=false"
  - docker rmi "${REPOSITORY}:cuda"

jupyter-std:
  <<: *builder
  stage: jpy
  script:
  - build_image_squash "${CI_JOB_NAME}" "docker_jpy/Dockerfile"
    --build-arg "repository=${REPOSITORY}"
    --build-arg "ARG_EXTEND_JUPYTER=true"
    --build-arg "ARG_NODEJS=true"
    --build-arg "ARG_LATEX_BASE=false"
    --build-arg "ARG_LATEX_CJK=false"
  - docker rmi "${REPOSITORY}:base"

jupyter-full:
  <<: *builder
  stage: jpy
  script:
  - build_image "${CI_JOB_NAME}" "docker_jpy/Dockerfile"
    --build-arg "repository=${REPOSITORY}"
    --build-arg "ARG_EXTEND_JUPYTER=true"
    --build-arg "ARG_NODEJS=true"
    --build-arg "ARG_LATEX_BASE=true"
    --build-arg "ARG_LATEX_CJK=true"
  - docker rmi "${REPOSITORY}:base"

jupyter-full-cuda:
  <<: *builder
  stage: jpy
  script:
  - build_image "${CI_JOB_NAME}" "docker_jpy/Dockerfile"
    --build-arg "repository=${REPOSITORY}"
    --build-arg "base=cuda"
    --build-arg "ARG_EXTEND_JUPYTER=true"
    --build-arg "ARG_NODEJS=true"
    --build-arg "ARG_LATEX_BASE=true"
    --build-arg "ARG_LATEX_CJK=true"
  - docker rmi "${REPOSITORY}:cuda"


r-mini:
  <<: *builder
  stage: qpod
  script:
  - build_image_squash "${CI_JOB_NAME}" "docker_template/Dockerfile"
    --build-arg "repository=${REPOSITORY}"
    --build-arg "base=jupyter-mini"
    --build-arg "ARG_R=true"
  - docker rmi "${REPOSITORY}:jupyter-mini"

r-std:
  <<: *builder
  stage: qpod
  script:
  - build_image_squash "${CI_JOB_NAME}" "docker_template/Dockerfile"
    --build-arg "repository=${REPOSITORY}"
    --build-arg "base=jupyter-std"
    --build-arg "ARG_JDK=true"
    --build-arg "ARG_R=true"
    --build-arg "ARG_R_DATASCIENCE=true"
  - docker rmi "${REPOSITORY}:jupyter-std"

r-latex:
  <<: *builder
  stage: qpod
  script:
  - build_image_squash "${CI_JOB_NAME}" "docker_template/Dockerfile"
    --build-arg "repository=${REPOSITORY}"
    --build-arg "base=jupyter-full"
    --build-arg "ARG_JDK=true"
    --build-arg "ARG_R=true"
    --build-arg "ARG_R_DATASCIENCE=true"
    --build-arg "ARG_LATEX_BASE=true"
  - docker rmi "${REPOSITORY}:jupyter-full"

r-studio:
  <<: *builder
  stage: qpod
  script:
  - build_image_squash "${CI_JOB_NAME}" "docker_template/Dockerfile"
    --build-arg "repository=${REPOSITORY}"
    --build-arg "base=jupyter-full"
    --build-arg "ARG_JDK=true"
    --build-arg "ARG_R=true"
    --build-arg "ARG_R_DATASCIENCE=true"
    --build-arg "ARG_R_STUDIO=true"
    --build-arg "ARG_LATEX_BASE=true"
    --build-arg "ARG_LATEX_CJK=true"
  - docker rmi "${REPOSITORY}:jupyter-full"


py-std:
  <<: *builder
  stage: qpod
  script:
  - build_image_squash "${CI_JOB_NAME}" "docker_template/Dockerfile"
    --build-arg "repository=${REPOSITORY}"
    --build-arg "base=jupyter-std"
    --build-arg "ARG_MKL=true"
    --build-arg "ARG_PY_DATABASE=true"
    --build-arg "ARG_PY_DATASCIENCE=true"
    --build-arg "ARG_PY_NLP=true"
    --build-arg "ARG_PY_CV=true"
    --build-arg "ARG_PY_BIOINFO=true"
  - docker rmi "${REPOSITORY}:jupyter-std"

py-jdk:
  <<: *builder
  stage: qpod
  script:
  - build_image_squash "${CI_JOB_NAME}" "docker_template/Dockerfile"
    --build-arg "repository=${REPOSITORY}"
    --build-arg "base=jupyter-std"
    --build-arg "ARG_JDK=true"
    --build-arg "ARG_MKL=true"
    --build-arg "ARG_PY_DATABASE=true"
    --build-arg "ARG_PY_DATASCIENCE=true"
    --build-arg "ARG_PY_NLP=true"
    --build-arg "ARG_PY_CV=true"
    --build-arg "ARG_PY_BIOINFO=true"
  - docker rmi "${REPOSITORY}:jupyter-std"

py-cuda:
  <<: *builder
  stage: qpod
  script:
  - build_image_squash "${CI_JOB_NAME}" "docker_template/Dockerfile"
    --build-arg "repository=${REPOSITORY}"
    --build-arg "base=jupyter-full-cuda"
    --build-arg "ARG_MKL=true"
    --build-arg "ARG_PY_DATABASE=true"
    --build-arg "ARG_PY_DATASCIENCE=true"
    --build-arg "ARG_PY_NLP=true"
    --build-arg "ARG_PY_CV=true"
    --build-arg "ARG_PY_BIOINFO=true"
  - docker rmi "${REPOSITORY}:jupyter-full-cuda"


go:
  <<: *builder
  stage: qpod
  script:
  - build_image_squash "${CI_JOB_NAME}" "docker_template/Dockerfile"
    --build-arg "repository=${REPOSITORY}"
    --build-arg "base=jupyter-std"
    --build-arg "ARG_GO=true"
  - docker rmi "${REPOSITORY}:jupyter-std"

julia:
  <<: *builder
  stage: qpod
  script:
  - build_image_squash "${CI_JOB_NAME}" "docker_template/Dockerfile"
    --build-arg "repository=${REPOSITORY}"
    --build-arg "base=jupyter-std"
    --build-arg "ARG_JULIA=true"
  - docker rmi "${REPOSITORY}:jupyter-std"

octave:
  <<: *builder
  stage: qpod
  script:
  - build_image_squash "${CI_JOB_NAME}" "docker_template/Dockerfile"
    --build-arg "repository=${REPOSITORY}"
    --build-arg "base=jupyter-full"
    --build-arg "ARG_OCTAVE=true"
  - docker rmi "${REPOSITORY}:jupyter-full"


full:
  <<: *builder
  stage: qpod
  script:
  - build_image "${CI_JOB_NAME}" "docker_template/Dockerfile"
    --build-arg "repository=${REPOSITORY}"
    --build-arg "base=jupyter-full"
    --build-arg "ARG_JDK=true"
    --build-arg "ARG_MKL=true"
    --build-arg "ARG_PY_DATABASE=true"
    --build-arg "ARG_PY_DATASCIENCE=true"
    --build-arg "ARG_PY_NLP=true"
    --build-arg "ARG_PY_CV=true"
    --build-arg "ARG_PY_BIOINFO=true"
    --build-arg "ARG_R=true"
    --build-arg "ARG_R_DATASCIENCE=true"
    --build-arg "ARG_R_STUDIO=true"
    --build-arg "ARG_GO=true"
    --build-arg "ARG_JULIA=true"
    --build-arg "ARG_OCTAVE=false"
  - alias_image "${CI_JOB_NAME}" "latest"
  - docker rmi "${REPOSITORY}:jupyter-full"

full-cuda:
  <<: *builder
  stage: qpod
  script:
  - build_image "${CI_JOB_NAME}" "docker_template/Dockerfile"
    --build-arg "repository=${REPOSITORY}"
    --build-arg "base=jupyter-full-cuda"
    --build-arg "ARG_JDK=true"
    --build-arg "ARG_MKL=true"
    --build-arg "ARG_PY_DATABASE=true"
    --build-arg "ARG_PY_DATASCIENCE=true"
    --build-arg "ARG_PY_NLP=true"
    --build-arg "ARG_PY_CV=true"
    --build-arg "ARG_PY_BIOINFO=true"
    --build-arg "ARG_R=true"
    --build-arg "ARG_R_DATASCIENCE=true"
    --build-arg "ARG_R_STUDIO=true"
    --build-arg "ARG_GO=true"
    --build-arg "ARG_JULIA=true"
    --build-arg "ARG_OCTAVE=false"
  - alias_image "${CI_JOB_NAME}" "latest-cuda"
  - docker rmi "${REPOSITORY}:jupyter-full-cuda"


openface:
  <<: *builder
  stage: vision
  script:
  - build_image_squash "${CI_JOB_NAME}" "docker_vision/OpenFace.Dockerfile"
    --build-arg "repository=${REPOSITORY}"
    --build-arg "base=base"
  - docker rmi "${REPOSITORY}:base"
